name: Supabase CI/CD

on:
  push:
    branches: [ main ]

jobs:
  staging-check:
    name: Staging — apply migrations, deploy functions, run e2e
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install supabase CLI
        run: npm install -g supabase

      - name: Supabase login
        run: supabase login --access-token $SUPABASE_ACCESS_TOKEN

      - name: Apply migrations to staging
        run: supabase db push --project-ref $SUPABASE_PROJECT_REF

      - name: Deploy functions to staging
        run: |
          supabase functions deploy orders_handler --project-ref $SUPABASE_PROJECT_REF --no-verify || true
          supabase functions deploy payment_webhook --project-ref $SUPABASE_PROJECT_REF --no-verify || true

      - name: Install frontend deps
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Run Playwright E2E against staging
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_FUNCTIONS_URL: ${{ secrets.STAGING_FUNCTIONS_URL }}
        run: |
          cd frontend
          npx playwright install --with-deps
          npm run test:e2e

      - name: Upload staging artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: staging-artifacts
          path: |
            frontend/tests/test-results
            frontend/playwright-report
            logs
            .

  production-deploy:
    name: Production — apply migrations & deploy
    runs-on: ubuntu-latest
    needs: staging-check
    if: needs.staging-check.result == 'success'
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install supabase CLI
        run: npm install -g supabase

      - name: Supabase login
        run: supabase login --access-token $SUPABASE_ACCESS_TOKEN

      - name: Apply migrations to production
        run: supabase db push --project-ref $SUPABASE_PROJECT_REF

      - name: Deploy functions to production
        run: |
          supabase functions deploy orders_handler --project-ref $SUPABASE_PROJECT_REF --no-verify || true
          supabase functions deploy payment_webhook --project-ref $SUPABASE_PROJECT_REF --no-verify || true

      - name: Upload production artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: production-artifacts
          path: |
            logs
            .

  production-failure-handler:
    name: Production Failure Handler
    runs-on: ubuntu-latest
    needs: production-deploy
    if: needs.production-deploy.result != 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Print failure note and attempt optional rollback script
        run: |
          echo "Production deploy failed. Inspect artifacts and logs."
          if [ -f ./scripts/rollback-prod.sh ]; then
            echo "Running scripts/rollback-prod.sh"
            bash ./scripts/rollback-prod.sh || true
          else
            echo "No rollback script found (./scripts/rollback-prod.sh). Skipping automatic rollback."
          fi
