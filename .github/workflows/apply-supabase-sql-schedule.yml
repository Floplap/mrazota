name: Scheduled Apply Supabase SQL

on:
  schedule:
    - cron: '0 * * * *' # every hour
  workflow_dispatch: {}
  push:
    branches:
      - apply-sql

jobs:
  apply-sql:
    runs-on: ubuntu-latest
    name: Scheduled apply infra/supabase_schema.sql
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies (pg)
        run: |
          npm ci --no-audit --no-fund || true
          npm install pg --no-audit --no-fund --no-save

      - name: Diagnostics and apply
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
        run: |
          mkdir -p logs || true
          echo "--- START DIAGNOSTICS ---" > logs/diagnostics.log
          node -e "try{const u=new URL(process.env.DATABASE_URL); console.log('HOST',u.hostname);}catch(e){console.error('PARSE_ERROR',e.message);process.exit(2)}" 2>&1 | tee -a logs/diagnostics.log || true
          echo '--- nslookup ---' | tee -a logs/diagnostics.log
          if [ -n "${DATABASE_URL}" ]; then
            HOST=$(node -e "const u=new URL(process.env.DATABASE_URL); console.log(u.hostname)")
            nslookup $HOST 2>&1 | tee -a logs/diagnostics.log || true
            echo '--- Node DNS lookup ---' | tee -a logs/diagnostics.log
            node -e "require('dns').promises.lookup(process.argv[1]).then(r=>console.log(r)).catch(e=>{console.error(e.message);process.exit(2)})" $HOST 2>&1 | tee -a logs/diagnostics.log || true
            echo '--- TCP connect test (node) ---' | tee -a logs/diagnostics.log
            node -e "(async()=>{const net=require('net');const h=process.argv[1],p=+process.argv[2];const s=new net.Socket();s.setTimeout(5000);s.on('connect',()=>{console.log('TCP OK');s.destroy();process.exit(0)});s.on('error',e=>{console.error('TCP_ERR',e.message);process.exit(2)});s.on('timeout',()=>{console.error('TCP_TIMEOUT');process.exit(3)});s.connect(p,h);})()" $HOST 5432 2>&1 | tee -a logs/diagnostics.log || true
          else
            echo 'DATABASE_URL secret not set' | tee -a logs/diagnostics.log
          fi

          echo '--- RUN APPLIER ---' | tee -a logs/apply-sql.log
          ATTEMPT=1
          MAX=3
          while [ $ATTEMPT -le $MAX ]; do
            echo "Attempt $ATTEMPT" | tee -a logs/apply-sql.log
            node ./scripts/apply-sql-node.js >> logs/apply-sql.log 2>&1 && break
            echo "Attempt $ATTEMPT failed" | tee -a logs/apply-sql.log
            ATTEMPT=$((ATTEMPT+1))
            sleep $((ATTEMPT * 5))
          done
          if [ $ATTEMPT -gt $MAX ]; then
            echo 'apply-sql-node.js failed after retries' | tee -a logs/apply-sql.log
            exit 2
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apply-sql-scheduled-logs
          path: |
            logs/apply-sql.log
            logs/diagnostics.log

      - name: Success note
        if: ${{ success() }}
        run: echo 'Scheduled SQL apply finished successfully.'
